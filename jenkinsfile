pipeline {
    agent any

    environment {
        // GitHub repository details
        GITHUB_REPO = 'git@github.com:<username>/<repo>.git'
        GITHUB_TOKEN = credentials('github-token') // GitHub token from Jenkins credentials
        GKE_CLUSTER_NAME = '<your-cluster-name>'
        GKE_ZONE = '<your-cluster-zone>'
        GCP_PROJECT_ID = '<your-gcp-project-id>'
        CLOUD_COMPOSER_ENV = '<your-cloud-composer-env>'
        DOCKER_IMAGE = 'gcr.io/<your-gcp-project-id>/<your-image-name>:latest'
        DOCKER_REGISTRY = 'gcr.io'
        GOOGLE_CREDENTIALS = credentials('google-cloud-credentials') // Google Cloud credentials stored in Jenkins
    }

    stages {
        stage('Checkout GitHub Repo') {
            steps {
                script {
                    // Checkout the GitHub repository
                    git branch: 'main', url: "${env.GITHUB_REPO}"
                }
            }
        }

        stage('Authenticate with Google Cloud') {
            steps {
                script {
                    // Authenticate with Google Cloud using the service account credentials
                    withCredentials([file(credentialsId: 'google-cloud-credentials', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                        sh '''
                            gcloud auth activate-service-account --key-file=${GOOGLE_APPLICATION_CREDENTIALS}
                            gcloud config set project ${GCP_PROJECT_ID}
                        '''
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh '''
                        docker build -t ${DOCKER_IMAGE} .
                    '''
                }
            }
        }

        stage('Push Docker Image to Registry') {
            steps {
                script {
                    // Push the Docker image to Google Container Registry
                    sh '''
                        docker push ${DOCKER_IMAGE}
                    '''
                }
            }
        }

        stage('Initialize Terraform') {
            steps {
                script {
                    // Initialize Terraform
                    sh '''
                        terraform init
                    '''
                }
            }
        }

        stage('Terraform Plan for Kubernetes') {
            steps {
                script {
                    // Run terraform plan for Kubernetes resources
                    sh '''
                        terraform plan -var="token=${TF_VAR_token}"
                    '''
                }
            }
        }

        stage('Apply Terraform for Kubernetes') {
            steps {
                script {
                    // Apply Terraform to deploy Kubernetes resources
                    sh '''
                        terraform apply -auto-approve -var="token=${TF_VAR_token}"
                    '''
                }
            }
        }

        stage('Configure GKE Cluster') {
            steps {
                script {
                    // Authenticate and configure kubectl with GKE
                    sh '''
                        gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone ${GKE_ZONE} --project ${GCP_PROJECT_ID}
                    '''
                }
            }
        }

        stage('Deploy Docker Container to Kubernetes') {
            steps {
                script {
                    // Update Kubernetes deployment with the new Docker image
                    sh '''
                        kubectl set image deployment/my-deployment my-container=${DOCKER_IMAGE} --record
                    '''
                }
            }
        }

        stage('Trigger Cloud Composer DAG') {
            steps {
                script {
                    // Trigger a Cloud Composer DAG
                    sh '''
                        gcloud composer environments run ${CLOUD_COMPOSER_ENV} --location ${GKE_ZONE} trigger_dag -- <dag-name>
                    '''
                }
            }
        }

        stage('Push Terraform Changes to GitHub') {
            steps {
                script {
                    // Push any Terraform or code changes to GitHub
                    sh '''
                        git config --global user.email "jenkins@company.com"
                        git config --global user.name "Jenkins CI"
                        git add .
                        git commit -m "Automated Terraform, Docker, and Kubernetes updates"
                        git push origin main
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
        success {
            echo 'Pipeline executed successfully.'
        }
        failure {
            ech
